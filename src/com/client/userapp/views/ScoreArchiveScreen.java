/*
 * The MIT License
 *
 * Copyright 2016 Giang.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.client.userapp.views;

import com.client.service.Clazz;
import com.client.service.Score;
import com.client.service.Student;
import com.client.userapp.Application;
import com.client.userapp.constants.WebMethods;
import com.client.userapp.constants.WindowSize;
import com.client.userapp.constants.WindowUtility;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Giang
 */
public class ScoreArchiveScreen extends javax.swing.JFrame {

    private Clazz clazz;
    private Student current;
    private List<Student> students;
    private List<Score> scores;
    private DefaultTableModel mScores;
    private DefaultListModel<String> mStudents;

    public ScoreArchiveScreen(Clazz clazz) {
        this.clazz = clazz;

        initComponents();
        btnSubmit.setEnabled(false);
        btnUpdate.setEnabled(false);
        lblClassName.setText("<html>Lớp <b><i>" + clazz.getName().replace("<", "&lt;").replace(">", "&gt;") + "</i></b></html>");
        mScores = (DefaultTableModel) tblScores.getModel();
        btnSubmit.setVisible(true);
        btnUpdate.setVisible(false);
        initStudents();

        setTitle(getTitle() + " - Lớp " + clazz.getName());
        setIconImage(Application.ICON);
        setSize(WindowSize.LARGE_WINDOW.getDimension());
        setMinimumSize(WindowSize.SMALL_WINDOW.getDimension());
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblClassName = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstStudents = new javax.swing.JList<>();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblStudentName = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblStudetnId = new javax.swing.JLabel();
        lblAvgScore = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblScores = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtRemark = new javax.swing.JTextArea();
        btnSubmit = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblClassName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblClassName.setText("{lblClassName}");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lstStudents.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lstStudents.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "[ ] Nguyen Van An", "[ ] Item 2", "[ ] Item 3", "[ ] Item 4", "[ ] Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstStudents.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstStudents.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstStudentsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstStudents);

        btnPrev.setText("<");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        btnNext.setText(">");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tổng kết điểm");

        jLabel2.setText("Họ tên:");

        lblStudentName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblStudentName.setText("----");

        jLabel4.setText("Mã số:");

        lblStudetnId.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblStudetnId.setText("----");

        lblAvgScore.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAvgScore.setText("----");

        jLabel7.setText("Điểm trung bình:");

        tblScores.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblScores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Môn học", "Hệ số 1", "Hệ số 2", "Hệ số 3", "Trung bình"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblScores.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblScores.setEnabled(false);
        tblScores.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblScores.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblScores);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel3.setText("Nhận xét");

        txtRemark.setEditable(false);
        txtRemark.setColumns(20);
        txtRemark.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        txtRemark.setRows(5);
        txtRemark.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRemarkKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(txtRemark);

        btnSubmit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSubmit.setText("Tổng kết");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnUpdate.setText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnPrev, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE))
                    .addComponent(lblClassName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblStudentName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblStudetnId, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblAvgScore, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblClassName)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(lblStudentName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(lblStudetnId)
                            .addComponent(jLabel7)
                            .addComponent(lblAvgScore))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate))))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        // TODO add your handling code here:
        if (lstStudents.getSelectedIndex() > 0) {
            lstStudents.setSelectedIndex(lstStudents.getSelectedIndex() - 1);
        }
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        if (lstStudents.getSelectedIndex() < (students.size() - 1)) {
            lstStudents.setSelectedIndex(lstStudents.getSelectedIndex() + 1);
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void lstStudentsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstStudentsValueChanged
        // TODO add your handling code here:
        if (lstStudents.getSelectedIndex() < 0 || lstStudents.getSelectedIndex() >= students.size()) {
            return;
        }
        if (lstStudents.getValueIsAdjusting()) {
            current = students.get(lstStudents.getSelectedIndex());
            lblStudentName.setText(current.getName());
            lblStudetnId.setText(current.getId() + "");
            txtRemark.setEditable(true);
            btnSubmit.setEnabled(false);
            btnUpdate.setEnabled(false);
            initScores();
        }
    }//GEN-LAST:event_lstStudentsValueChanged

    private void txtRemarkKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRemarkKeyTyped
        // TODO add your handling code here:
        if (txtRemark.getText().length()>0) {
            btnSubmit.setEnabled(true);
            btnUpdate.setEnabled(true);
        }
    }//GEN-LAST:event_txtRemarkKeyTyped

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        String remark = txtRemark.getText()
                .replace("<", "&lt;")
                .replace(">", "&gt;")
                .replace("\n", "<br/>");
        new Thread(()->{
            btnSubmit.setEnabled(false);
            LoadingScreen load = new LoadingScreen("Đang tải...");
            load.setVisible(true);
            WebMethods.archiveToLogByStudent(current.getId(), 
                    remark+"<hr/>Giáo viên chủ nhiệm<br/><b>"+Application.TEACHER.getName()+"</b>");
            load.dispose();
            btnSubmit.setEnabled(true);
        }).start();
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        String remark = txtRemark.getText()
                .replace("<", "&lt;")
                .replace(">", "&gt;")
                .replace("\n", "<br/>")
                + "<hr/>Giáo viên chủ nhiệm<br/><b>"
                + Application.TEACHER.getName() + "</b>";
        new Thread(()->{
            btnUpdate.setEnabled(false);
            LoadingScreen load = new LoadingScreen("Đang tải...");
            load.setVisible(true);
            WebMethods.editArchiveRemark(current.getId(), remark);
            load.dispose();
            btnUpdate.setEnabled(true);
        }).start();
    }//GEN-LAST:event_btnUpdateActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAvgScore;
    private javax.swing.JLabel lblClassName;
    private javax.swing.JLabel lblStudentName;
    private javax.swing.JLabel lblStudetnId;
    private javax.swing.JList<String> lstStudents;
    private javax.swing.JTable tblScores;
    private javax.swing.JTextArea txtRemark;
    // End of variables declaration//GEN-END:variables

    private void initStudents() {
        mStudents = new DefaultListModel<>();
        lstStudents.setModel(mStudents);
        mStudents.removeAllElements();
        new Thread(() -> {
            LoadingScreen load = new LoadingScreen("Đang tải...");
            load.setVisible(true);
            students = WebMethods.getStudentsByClass(clazz);
            for (Student s : students) {
                mStudents.addElement(s.getName());
            }
            load.dispose();
        }).start();
    }

    private void initScores() {
        mScores.setRowCount(0);
        scores = new ArrayList<>();
        new Thread(() -> {
            LoadingScreen load = new LoadingScreen("Đang tải...");
            load.setVisible(true);
            // load score by student
            scores = WebMethods.getScoresByStudent(current);
            if (scores.size()<=0) {
                // nothing left
                load.dispose();
                WindowUtility.showMessage(this, "Thông báo", "Học sinh đã được tổng kết điểm hoặc chưa có đầu điểm nào mới.\nBạn chỉ có thể sửa Nhận xét của lần tổng kết điểm gần nhất học sinh.", WindowUtility.WARNING);
                btnSubmit.setVisible(false);
                btnUpdate.setVisible(true);
                return;
            }
            Hashtable<String, String[]> data = new Hashtable<>();
            for (Score s : scores) {
                // Dear God of Coders, I'm really sorry! boo-hoo :(
                String[] d;
                if (data.get(s.getSubjectId().getName()) != null) {
                    d = data.get(s.getSubjectId().getName());
                } else {
                    d = new String[Integer.parseInt(Application.PROP.get("max_coeff").toString())];
                }
                if (d[s.getCoefficient() - 1] == null) {
                    d[s.getCoefficient() - 1] = "";
                }
                d[s.getCoefficient() - 1] += d[s.getCoefficient() - 1] + s.getScore() + " ; ";
                data.put(s.getSubjectId().getName(), d);
            }
            // load scores to table
            double avgTotal = 0;
            double subTotal;
            int coeffTotal;
            for (String key : data.keySet()) {
                // Init for avg calcuating
                subTotal = 0;
                coeffTotal = 0;
                // Table row process
                String[] val = data.get(key);
                // Init context for table's row
                String[] ctx = new String[val.length + 2];
                for (String string : ctx) {
                    string = "";
                }
                ctx[0] = key;
                for (int i = 0; i < val.length; i++) {
                    if (val[i] != null) {
                        ctx[i + 1] = val[i].substring(0, val[i].length() - 3);
                        String[] scoreVal = val[i].split(" ; ");
                        // counting for avg
                        for (String score : scoreVal) {
                            if (score.equals("")) continue;
                            try {
                                subTotal += Double.parseDouble(score) * (i+1);
                                coeffTotal += i + 1;
                            } catch (NumberFormatException ex) {
                                // ignore
                            }
                        }
                    } else {
                        ctx[i + 1] = "";
                    }
                }
                if (coeffTotal != 0) {
                    avgTotal += ((double) subTotal / (double) coeffTotal);
                    ctx[ctx.length - 1] = ((double) subTotal / (double) coeffTotal) + "";
                } else {
                    ctx[ctx.length - 1] = "0";
                }
                // add row (finally!)
                mScores.addRow(ctx);
            }
            lblAvgScore.setText(avgTotal / data.size() + "");
            load.dispose();
            btnSubmit.setVisible(true);
            btnUpdate.setVisible(false);
        }).start();
    }
}
